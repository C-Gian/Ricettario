package com.journaldev.recyclerviewcardview;import androidx.annotation.NonNull;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.app.AppCompatActivity;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.os.Build;import android.os.Bundle;import androidx.cardview.widget.CardView;import androidx.core.content.ContextCompat;import androidx.recyclerview.widget.DefaultItemAnimator;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import android.view.MenuItem;import android.view.View;import android.view.WindowManager;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.view.animation.LayoutAnimationController;import android.widget.ImageButton;import android.widget.ImageView;import android.widget.SearchView;import android.widget.TextView;import android.widget.Toast;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.Task;import com.google.android.material.bottomnavigation.BottomNavigationView;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.ValueEventListener;import java.io.Serializable;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;public class Main extends AppCompatActivity {    private RecyclerView.LayoutManager layoutManager;    private RecyclerView recyclerView;    private ArrayList<MyDishes> listDishes = new ArrayList<>();    static View.OnClickListener myOnClickListener;    //------------------------------------------------    TextView titlepage, typeDishes;    SearchView searchBarView;    String URL = "https://applista-ed210-default-rtdb.europe-west1.firebasedatabase.app/";    DatabaseReference databaseReference;    CustomAdapter customAdapter;    public static ImageButton btnSort, btnAllSelection, btnDelete, btnAddToCart;    ImageButton btnAll, btnAppetizer, btnFirst, btnSecond, btnSide, btnDessert, btnDrink;    ImageView imageviewheadermain1, imageviewheadermain2, imageviewheadermain3, imageviewheadermain4, imageviewheadermain5, imageviewheadermain6, imageviewheadermain7;    boolean allSelected, sorted;    String currentSection = "all";    /*    private void layoutAnimation(RecyclerView recyclerView){        Context context = recyclerView.getContext();        LayoutAnimationController layoutAnimationController = AnimationUtils.loadLayoutAnimation(context, R.anim.layout_animation_slide_from_right);        recyclerView.setLayoutAnimation(layoutAnimationController);        recyclerView.getAdapter().notifyDataSetChanged();        recyclerView.scheduleLayoutAnimation();    }*/    private void search(String str) {        ArrayList<MyDishes> newListDishes = new ArrayList<>();        for (MyDishes dish : listDishes) {            if (currentSection.equals("all")) {                if (dish.getDishName().toLowerCase().contains(str.toLowerCase()) || dish.getDishDesc().toLowerCase().contains(str.toLowerCase())) {                    newListDishes.add(dish);                }            }else{                if (dish.getType().equals(currentSection)){                    if (dish.getDishName().toLowerCase().contains(str.toLowerCase()) || dish.getDishDesc().toLowerCase().contains(str.toLowerCase())) {                        newListDishes.add(dish);                    }                }            }        }        // reset data in adapter and not re-creating adapter:        customAdapter.setDataSet(newListDishes);        Main.this.runOnUiThread(new Runnable() {            @Override            public void run() {                customAdapter.notifyDataSetChanged();            }        });        recyclerView.setAdapter(customAdapter);        customAdapter.notifyDataSetChanged();    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        getSupportActionBar().hide();        setContentView(R.layout.activity_main);        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING);        //------------------------------------------------------------------        //myOnClickListener = new MyOnClickListener(this);        recyclerView = findViewById(R.id.my_recycler_view);        LayoutAnimationController layoutAnimationController = AnimationUtils.loadLayoutAnimation(this, R.anim.layout_animation_slide_from_right);        recyclerView.setLayoutAnimation(layoutAnimationController);        recyclerView.setHasFixedSize(true);        layoutManager = new LinearLayoutManager(this);        recyclerView.setLayoutManager(layoutManager);        recyclerView.setItemAnimator(new DefaultItemAnimator());        customAdapter = new CustomAdapter(listDishes, this);        recyclerView.setAdapter(customAdapter);        recyclerView.scheduleLayoutAnimation();        //------------------------------------------------------------------        searchBarView = findViewById(R.id.searchBarView);        btnSort = findViewById(R.id.btnSort);        btnAllSelection = findViewById(R.id.btnAllSelection);        btnDelete = findViewById(R.id.btnDelete);        btnAddToCart = findViewById(R.id.btnAddToCart);        btnAll = findViewById(R.id.btnAll);        btnAppetizer = findViewById(R.id.btnAppetizer);        btnFirst = findViewById(R.id.btnFirst);        btnSecond = findViewById(R.id.btnSecond);        btnSide = findViewById(R.id.btnSide);        btnDessert = findViewById(R.id.btnDessert);        btnDrink = findViewById(R.id.btnDrink);        imageviewheadermain1 = findViewById(R.id.imageviewheadermain1);        imageviewheadermain2 = findViewById(R.id.imageviewheadermain2);        imageviewheadermain3 = findViewById(R.id.imageviewheadermain3);        imageviewheadermain4 = findViewById(R.id.imageviewheadermain4);        imageviewheadermain5 = findViewById(R.id.imageviewheadermain5);        imageviewheadermain6 = findViewById(R.id.imageviewheadermain6);        imageviewheadermain7 = findViewById(R.id.imageviewheadermain7);        TextView typeDishes = (TextView)findViewById(R.id.typeDishes);        TextView textAll = (TextView)findViewById(R.id.textAll);        textAll.setTextColor(getResources().getColor(R.color.mainblue));        TextView textAppetizer = (TextView)findViewById(R.id.textAppetizer);        final int defaultColor = textAppetizer.getCurrentTextColor();        TextView textFirst = (TextView)findViewById(R.id.textFirst);        TextView textSecond = (TextView)findViewById(R.id.textSecond);        TextView textSide = (TextView)findViewById(R.id.textSide);        TextView textDessert = (TextView)findViewById(R.id.textDessert);        TextView textDrink = (TextView)findViewById(R.id.textDrink);        BottomNavigationView bottomNav = findViewById(R.id.bottomNavBar);        bottomNav.setSelectedItemId(R.id.navigation_home);        bottomNav.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() {            @Override            public boolean onNavigationItemSelected(@NonNull MenuItem item) {                switch (item.getItemId()) {                    case R.id.navigation_home:                        return true;                    case R.id.navigation_add:                        startActivity(new Intent(getApplicationContext(), AddDish.class));                        finish();                        overridePendingTransition(0, 0);                        return true;                    case R.id.navigation_shoppingcart:                        Intent intent = new Intent(getApplicationContext(), ShoppingCart.class);                        finish();                        startActivity(intent);                        overridePendingTransition(0, 0);                        return true;                    case R.id.navigation_grocerylist:                        startActivity(new Intent(getApplicationContext(), GroceryList.class));                        finish();                        overridePendingTransition(0, 0);                        return true;                }                return false;            }        });        //get data from firebase        databaseReference = FirebaseDatabase.getInstance(URL).getReference().child("ListApp");        databaseReference.addListenerForSingleValueEvent(new ValueEventListener() {            @Override            public void onDataChange(DataSnapshot dataSnapshot) {                //set code to retrive data and replace layout                for (DataSnapshot dataSnapshot1 : dataSnapshot.getChildren()) {                    MyDishes dish = dataSnapshot1.getValue(MyDishes.class);                    listDishes.add(dish);                }                // reset data in adapter and not re-creating adapter:                customAdapter.setDataSet(listDishes);                Main.this.runOnUiThread(new Runnable() {                    public void run() {                        customAdapter.notifyDataSetChanged();                    }                });                recyclerView.setAdapter(customAdapter);                customAdapter.notifyDataSetChanged();                recyclerView.scheduleLayoutAnimation();            }            @Override            public void onCancelled(DatabaseError databaseError) {                //set code to show an error                Toast.makeText(getApplicationContext(), "No Data", Toast.LENGTH_SHORT).show();            }        });        if (searchBarView != null) {            //searchView.setIconified(false);            searchBarView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {                @Override                public boolean onQueryTextSubmit(String s) {                    return false;                }                @Override                public boolean onQueryTextChange(String s) {                    search(s);                    return true;                }            });        }        btnSort.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if (listDishes.size() != 0) {                    if (!currentSection.equals("all")){                        ArrayList<MyDishes> temp = new ArrayList<>();                        for (MyDishes dish : listDishes){                            if (dish.getType().equals(currentSection)) temp.add(dish);                        }                        if (sorted) {                            Collections.sort(temp, Collections.reverseOrder());                            // reset data in adapter and not re-creating adapter:                            customAdapter.setDataSet(temp);                            Main.this.runOnUiThread(new Runnable() {                                @Override                                public void run() {                                    customAdapter.notifyDataSetChanged();                                }                            });                            recyclerView.setAdapter(customAdapter);                            customAdapter.notifyDataSetChanged();                            sorted = false;                            btnSort.setBackgroundResource(R.drawable.btnsortup);                        } else {                            Collections.sort(temp);                            // reset data in adapter and not re-creating adapter:                            customAdapter.setDataSet(temp);                            Main.this.runOnUiThread(new Runnable() {                                @Override                                public void run() {                                    customAdapter.notifyDataSetChanged();                                }                            });                            recyclerView.setAdapter(customAdapter);                            customAdapter.notifyDataSetChanged();                            sorted = true;                            btnSort.setBackgroundResource(R.drawable.btnsortdown);                        }                    }else {                        if (sorted) {                            Collections.sort(listDishes, Collections.reverseOrder());                            // reset data in adapter and not re-creating adapter:                            customAdapter.setDataSet(listDishes);                            Main.this.runOnUiThread(new Runnable() {                                @Override                                public void run() {                                    customAdapter.notifyDataSetChanged();                                }                            });                            recyclerView.setAdapter(customAdapter);                            customAdapter.notifyDataSetChanged();                            sorted = false;                            btnSort.setBackgroundResource(R.drawable.btnsortup);                        } else {                            Collections.sort(listDishes);                            // reset data in adapter and not re-creating adapter:                            customAdapter.setDataSet(listDishes);                            Main.this.runOnUiThread(new Runnable() {                                @Override                                public void run() {                                    customAdapter.notifyDataSetChanged();                                }                            });                            recyclerView.setAdapter(customAdapter);                            customAdapter.notifyDataSetChanged();                            sorted = true;                            btnSort.setBackgroundResource(R.drawable.btnsortdown);                        }                    }                }            }        });        btnAllSelection.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if (listDishes.size() != 0) {                    if (!currentSection.equals("all")) {                        ArrayList<MyDishes> temp = new ArrayList<>();                        for (MyDishes dish : listDishes){                            if (dish.getType().equals(currentSection)) temp.add(dish);                        }                        if (allSelected) {                            for (MyDishes dish : temp) {                                dish.setSelected(false);                            }                            allSelected = false;                            //CardView cardView = findViewById(R.id.card_view);                            //cardView.setCardBackgroundColor(ContextCompat.getColor(getApplicationContext(), R.color.color_white));                            btnAllSelection.setBackgroundResource(R.drawable.allselectiondeselected);                            btnDelete.setVisibility(View.INVISIBLE);                            btnDelete.setClickable(false);                            btnAllSelection.setVisibility(View.INVISIBLE);                            btnAllSelection.setClickable(false);                            btnAddToCart.setVisibility(View.INVISIBLE);                            btnAddToCart.setClickable(false);                        } else {                            for (MyDishes dish : temp) {                                dish.setSelected(true);                                //CardView cardView = findViewById(R.id.card_view);                                //cardView.setCardBackgroundColor(ContextCompat.getColor(getApplicationContext(), R.color.light_selection));                            }                            allSelected = true;                            btnAllSelection.setBackgroundResource(R.drawable.allselectionselected);                            btnDelete.setVisibility(View.VISIBLE);                            btnDelete.setClickable(true);                            btnAllSelection.setVisibility(View.VISIBLE);                            btnAllSelection.setClickable(true);                            btnAddToCart.setVisibility(View.VISIBLE);                            btnAddToCart.setClickable(true);                        }                        customAdapter.setDataSet(temp);                        Main.this.runOnUiThread(new Runnable() {                            @Override                            public void run() {                                customAdapter.notifyDataSetChanged();                            }                        });                        recyclerView.setAdapter(customAdapter);                        customAdapter.notifyDataSetChanged();                    } else {                        if (allSelected) {                            for (MyDishes dish : listDishes) {                                dish.setSelected(false);                            }                            allSelected = false;                            //CardView cardView = findViewById(R.id.card_view);                            //cardView.setCardBackgroundColor(ContextCompat.getColor(getApplicationContext(), R.color.color_white));                            btnAllSelection.setBackgroundResource(R.drawable.allselectiondeselected);                            btnDelete.setVisibility(View.INVISIBLE);                            btnDelete.setClickable(false);                            btnAllSelection.setVisibility(View.INVISIBLE);                            btnAllSelection.setClickable(false);                            btnAddToCart.setVisibility(View.INVISIBLE);                            btnAddToCart.setClickable(false);                        } else {                            for (MyDishes dish : listDishes) {                                dish.setSelected(true);                                //CardView cardView = findViewById(R.id.card_view);                                //cardView.setCardBackgroundColor(ContextCompat.getColor(getApplicationContext(), R.color.light_selection));                            }                            allSelected = true;                            btnAllSelection.setBackgroundResource(R.drawable.allselectionselected);                            btnDelete.setVisibility(View.VISIBLE);                            btnDelete.setClickable(true);                            btnAllSelection.setVisibility(View.VISIBLE);                            btnAllSelection.setClickable(true);                            btnAddToCart.setVisibility(View.VISIBLE);                            btnAddToCart.setClickable(true);                        }                        customAdapter.setDataSet(listDishes);                        Main.this.runOnUiThread(new Runnable() {                            @Override                            public void run() {                                customAdapter.notifyDataSetChanged();                            }                        });                        recyclerView.setAdapter(customAdapter);                        customAdapter.notifyDataSetChanged();                    }                }            }        });        btnAddToCart.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if (listDishes.size() != 0) {                    for (MyDishes dish : listDishes) {                        if (dish.isSelected()) {                            databaseReference = FirebaseDatabase.getInstance(URL).getReference().child("ListApp").child("Dish" + dish.getKey());                            databaseReference.addListenerForSingleValueEvent(new ValueEventListener() {                                @Override                                public void onDataChange(@NonNull DataSnapshot snapshot) {                                    snapshot.getRef().child("inCart").setValue(true);                                }                                @Override                                public void onCancelled(@NonNull DatabaseError error) {                                }                            });                            dish.inCart = true;                        }                    }                    ImageView stateImage = findViewById(R.id.imageView3);                    stateImage.setVisibility(View.INVISIBLE);                    CustomAdapter.multiSelection = false;                    allSelected = false;                    btnDelete.setVisibility(View.INVISIBLE);                    btnDelete.setClickable(false);                    btnAllSelection.setVisibility(View.INVISIBLE);                    btnAllSelection.setClickable(false);                    btnAddToCart.setVisibility(View.INVISIBLE);                    btnAddToCart.setClickable(false);                    startActivity(new Intent(getApplicationContext(), ShoppingCart.class));                    finish();                }            }        });        btnDelete.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if (allSelected){                    AlertDialog.Builder removeAllDishesAlert = new AlertDialog.Builder(Main.this);                    removeAllDishesAlert.setTitle("ATTENTION!");                    removeAllDishesAlert.setMessage("Remove All Dishes?");                    removeAllDishesAlert.setPositiveButton("Remove", new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int which) {                            ArrayList<MyDishes> temp = new ArrayList<>();                            for (MyDishes dish : listDishes) {                                if (dish.isSelected()) {                                    FirebaseDatabase.getInstance(URL).getReference().child("ListApp").child("Dish" + dish.getKey()).removeValue();                                    temp.add(dish);                                }                            }                            listDishes.removeAll(temp);                            CustomAdapter.multiSelection = false;                            btnDelete.setVisibility(View.INVISIBLE);                            btnDelete.setClickable(false);                            btnAllSelection.setVisibility(View.INVISIBLE);                            btnAllSelection.setClickable(false);                            btnAddToCart.setVisibility(View.INVISIBLE);                            btnAddToCart.setClickable(false);                            btnAllSelection.setBackgroundResource(R.drawable.allselectiondeselected);                            customAdapter.setDataSet(listDishes);                            recyclerView.setAdapter(customAdapter);                            customAdapter.notifyDataSetChanged();                        }                    });                    removeAllDishesAlert.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int which) {                        }                    });                    removeAllDishesAlert.show();                }else {                    ArrayList<MyDishes> temp = new ArrayList<>();                    for (MyDishes dish : listDishes) {                        if (dish.isSelected()) {                            FirebaseDatabase.getInstance(URL).getReference().child("ListApp").child("Dish" + dish.getKey()).removeValue();                            temp.add(dish);                        }                    }                    listDishes.removeAll(temp);                    CustomAdapter.multiSelection = false;                    btnDelete.setVisibility(View.INVISIBLE);                    btnDelete.setClickable(false);                    btnAllSelection.setVisibility(View.INVISIBLE);                    btnAllSelection.setClickable(false);                    btnAddToCart.setVisibility(View.INVISIBLE);                    btnAddToCart.setClickable(false);                    btnAllSelection.setBackgroundResource(R.drawable.allselectiondeselected);                    customAdapter.setDataSet(listDishes);                    recyclerView.setAdapter(customAdapter);                    customAdapter.notifyDataSetChanged();                }            }        });        btnAll.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                currentSection = "all";                btnAll.setBackgroundResource(R.drawable.alliconselected);                btnAppetizer.setBackgroundResource(R.drawable.appetizericon);                btnFirst.setBackgroundResource(R.drawable.pastaicon);                btnSecond.setBackgroundResource(R.drawable.meaticon);                btnSide.setBackgroundResource(R.drawable.sideicon);                btnDessert.setBackgroundResource(R.drawable.desserticon);                btnDrink.setBackgroundResource(R.drawable.drinkicon);                textAll.setTextColor(getResources().getColor(R.color.mainblue));                textAppetizer.setTextColor(defaultColor);                textFirst.setTextColor(defaultColor);                textSecond.setTextColor(defaultColor);                textSide.setTextColor(defaultColor);                textDessert.setTextColor(defaultColor);                textDrink.setTextColor(defaultColor);                imageviewheadermain1.setVisibility(View.VISIBLE);                imageviewheadermain2.setVisibility(View.INVISIBLE);                imageviewheadermain3.setVisibility(View.INVISIBLE);                imageviewheadermain4.setVisibility(View.INVISIBLE);                imageviewheadermain5.setVisibility(View.INVISIBLE);                imageviewheadermain6.setVisibility(View.INVISIBLE);                imageviewheadermain7.setVisibility(View.INVISIBLE);                typeDishes.setText("All Dishes");                // reset data in adapter and not re-creating adapter:                customAdapter.setDataSet(listDishes);                Main.this.runOnUiThread(new Runnable() {                    @Override                    public void run() {                        customAdapter.notifyDataSetChanged();                    }                });                recyclerView.setAdapter(customAdapter);                customAdapter.notifyDataSetChanged();            }        });        btnAppetizer.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                currentSection = "appetizer";                btnAll.setBackgroundResource(R.drawable.allicon);                btnAppetizer.setBackgroundResource(R.drawable.appetizericonselected);                btnFirst.setBackgroundResource(R.drawable.pastaicon);                btnSecond.setBackgroundResource(R.drawable.meaticon);                btnSide.setBackgroundResource(R.drawable.sideicon);                btnDessert.setBackgroundResource(R.drawable.desserticon);                btnDrink.setBackgroundResource(R.drawable.drinkicon);                textAll.setTextColor(defaultColor);                textAppetizer.setTextColor(getResources().getColor(R.color.appetizerbackgroundcolor));                textFirst.setTextColor(defaultColor);                textSecond.setTextColor(defaultColor);                textSide.setTextColor(defaultColor);                textDessert.setTextColor(defaultColor);                textDrink.setTextColor(defaultColor);                imageviewheadermain1.setVisibility(View.INVISIBLE);                imageviewheadermain2.setVisibility(View.VISIBLE);                imageviewheadermain3.setVisibility(View.INVISIBLE);                imageviewheadermain4.setVisibility(View.INVISIBLE);                imageviewheadermain5.setVisibility(View.INVISIBLE);                imageviewheadermain6.setVisibility(View.INVISIBLE);                imageviewheadermain7.setVisibility(View.INVISIBLE);                typeDishes.setText("Appetizers");                ArrayList<MyDishes> onlyAppetizer = new ArrayList<>();                for (MyDishes dish : listDishes){                    if (dish.getType().equals("appetizer")) onlyAppetizer.add(dish);                }                // reset data in adapter and not re-creating adapter:                customAdapter.setDataSet(onlyAppetizer);                Main.this.runOnUiThread(new Runnable() {                    @Override                    public void run() {                        customAdapter.notifyDataSetChanged();                    }                });                recyclerView.setAdapter(customAdapter);                customAdapter.notifyDataSetChanged();            }        });        btnFirst.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                currentSection = "first";                btnAll.setBackgroundResource(R.drawable.allicon);                btnAppetizer.setBackgroundResource(R.drawable.appetizericon);                btnFirst.setBackgroundResource(R.drawable.pastaiconselected);                btnSecond.setBackgroundResource(R.drawable.meaticon);                btnSide.setBackgroundResource(R.drawable.sideicon);                btnDessert.setBackgroundResource(R.drawable.desserticon);                btnDrink.setBackgroundResource(R.drawable.drinkicon);                textAll.setTextColor(defaultColor);                textAppetizer.setTextColor(defaultColor);                textFirst.setTextColor(getResources().getColor(R.color.firstbackgroundcolor));                textSecond.setTextColor(defaultColor);                textSide.setTextColor(defaultColor);                textDessert.setTextColor(defaultColor);                textDrink.setTextColor(defaultColor);                imageviewheadermain1.setVisibility(View.INVISIBLE);                imageviewheadermain2.setVisibility(View.INVISIBLE);                imageviewheadermain3.setVisibility(View.VISIBLE);                imageviewheadermain4.setVisibility(View.INVISIBLE);                imageviewheadermain5.setVisibility(View.INVISIBLE);                imageviewheadermain6.setVisibility(View.INVISIBLE);                imageviewheadermain7.setVisibility(View.INVISIBLE);                TextView typeDishes = (TextView)findViewById(R.id.typeDishes);                typeDishes.setText("Main Courses");                ArrayList<MyDishes> onlyFirst = new ArrayList<>();                for (MyDishes dish : listDishes){                    if (dish.getType().equals("first")) onlyFirst.add(dish);                }                // reset data in adapter and not re-creating adapter:                customAdapter.setDataSet(onlyFirst);                Main.this.runOnUiThread(new Runnable() {                    @Override                    public void run() {                        customAdapter.notifyDataSetChanged();                    }                });                recyclerView.setAdapter(customAdapter);                customAdapter.notifyDataSetChanged();            }        });        btnSecond.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                currentSection = "second";                btnAll.setBackgroundResource(R.drawable.allicon);                btnAppetizer.setBackgroundResource(R.drawable.appetizericon);                btnFirst.setBackgroundResource(R.drawable.pastaicon);                btnSecond.setBackgroundResource(R.drawable.meaticonselected);                btnSide.setBackgroundResource(R.drawable.sideicon);                btnDessert.setBackgroundResource(R.drawable.desserticon);                btnDrink.setBackgroundResource(R.drawable.drinkicon);                textAll.setTextColor(defaultColor);                textAppetizer.setTextColor(defaultColor);                textFirst.setTextColor(defaultColor);                textSecond.setTextColor(getResources().getColor(R.color.secondbackgroundcolor));                textSide.setTextColor(defaultColor);                textDessert.setTextColor(defaultColor);                textDrink.setTextColor(defaultColor);                imageviewheadermain1.setVisibility(View.INVISIBLE);                imageviewheadermain2.setVisibility(View.INVISIBLE);                imageviewheadermain3.setVisibility(View.INVISIBLE);                imageviewheadermain4.setVisibility(View.VISIBLE);                imageviewheadermain5.setVisibility(View.INVISIBLE);                imageviewheadermain6.setVisibility(View.INVISIBLE);                imageviewheadermain7.setVisibility(View.INVISIBLE);                TextView typeDishes = (TextView)findViewById(R.id.typeDishes);                typeDishes.setText("Main Courses");                ArrayList<MyDishes> onlySecond = new ArrayList<>();                for (MyDishes dish : listDishes){                    if (dish.getType().equals("second")) onlySecond.add(dish);                }                // reset data in adapter and not re-creating adapter:                customAdapter.setDataSet(onlySecond);                Main.this.runOnUiThread(new Runnable() {                    @Override                    public void run() {                        customAdapter.notifyDataSetChanged();                    }                });                recyclerView.setAdapter(customAdapter);                customAdapter.notifyDataSetChanged();            }        });        btnSide.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                currentSection = "side";                btnAll.setBackgroundResource(R.drawable.allicon);                btnAppetizer.setBackgroundResource(R.drawable.appetizericon);                btnFirst.setBackgroundResource(R.drawable.pastaicon);                btnSecond.setBackgroundResource(R.drawable.meaticon);                btnSide.setBackgroundResource(R.drawable.sideiconselected);                btnDessert.setBackgroundResource(R.drawable.desserticon);                btnDrink.setBackgroundResource(R.drawable.drinkicon);                textAll.setTextColor(defaultColor);                textAppetizer.setTextColor(defaultColor);                textFirst.setTextColor(defaultColor);                textSecond.setTextColor(defaultColor);                textSide.setTextColor(getResources().getColor(R.color.sidebackgroundcolor));                textDessert.setTextColor(defaultColor);                textDrink.setTextColor(defaultColor);                imageviewheadermain1.setVisibility(View.INVISIBLE);                imageviewheadermain2.setVisibility(View.INVISIBLE);                imageviewheadermain3.setVisibility(View.INVISIBLE);                imageviewheadermain4.setVisibility(View.INVISIBLE);                imageviewheadermain5.setVisibility(View.VISIBLE);                imageviewheadermain6.setVisibility(View.INVISIBLE);                imageviewheadermain7.setVisibility(View.INVISIBLE);                TextView typeDishes = (TextView)findViewById(R.id.typeDishes);                typeDishes.setText("Sides");                ArrayList<MyDishes> onlySide = new ArrayList<>();                for (MyDishes dish : listDishes){                    if (dish.getType().equals("side")) onlySide.add(dish);                }                // reset data in adapter and not re-creating adapter:                customAdapter.setDataSet(onlySide);                Main.this.runOnUiThread(new Runnable() {                    @Override                    public void run() {                        customAdapter.notifyDataSetChanged();                    }                });                recyclerView.setAdapter(customAdapter);                customAdapter.notifyDataSetChanged();            }        });        btnDessert.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                currentSection = "dessert";                btnAll.setBackgroundResource(R.drawable.allicon);                btnAppetizer.setBackgroundResource(R.drawable.appetizericon);                btnFirst.setBackgroundResource(R.drawable.pastaicon);                btnSecond.setBackgroundResource(R.drawable.meaticon);                btnSide.setBackgroundResource(R.drawable.sideicon);                btnDessert.setBackgroundResource(R.drawable.desserticonselected);                btnDrink.setBackgroundResource(R.drawable.drinkicon);                textAll.setTextColor(defaultColor);                textAppetizer.setTextColor(defaultColor);                textFirst.setTextColor(defaultColor);                textSecond.setTextColor(defaultColor);                textSide.setTextColor(defaultColor);                textDessert.setTextColor(getResources().getColor(R.color.dessertbackgroundcolor));                textDrink.setTextColor(defaultColor);                imageviewheadermain1.setVisibility(View.INVISIBLE);                imageviewheadermain2.setVisibility(View.INVISIBLE);                imageviewheadermain3.setVisibility(View.INVISIBLE);                imageviewheadermain4.setVisibility(View.INVISIBLE);                imageviewheadermain5.setVisibility(View.INVISIBLE);                imageviewheadermain6.setVisibility(View.VISIBLE);                imageviewheadermain7.setVisibility(View.INVISIBLE);                TextView typeDishes = (TextView)findViewById(R.id.typeDishes);                typeDishes.setText("Desserts");                ArrayList<MyDishes> onlyDessert = new ArrayList<>();                for (MyDishes dish : listDishes){                    if (dish.getType().equals("dessert")) onlyDessert.add(dish);                }                // reset data in adapter and not re-creating adapter:                customAdapter.setDataSet(onlyDessert);                Main.this.runOnUiThread(new Runnable() {                    @Override                    public void run() {                        customAdapter.notifyDataSetChanged();                    }                });                recyclerView.setAdapter(customAdapter);                customAdapter.notifyDataSetChanged();            }        });        btnDrink.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                currentSection = "drink";                btnAll.setBackgroundResource(R.drawable.allicon);                btnAppetizer.setBackgroundResource(R.drawable.appetizericon);                btnFirst.setBackgroundResource(R.drawable.pastaicon);                btnSecond.setBackgroundResource(R.drawable.meaticon);                btnSide.setBackgroundResource(R.drawable.sideicon);                btnDessert.setBackgroundResource(R.drawable.desserticon);                btnDrink.setBackgroundResource(R.drawable.drinkiconselected);                textAll.setTextColor(defaultColor);                textAppetizer.setTextColor(defaultColor);                textFirst.setTextColor(defaultColor);                textSecond.setTextColor(defaultColor);                textSide.setTextColor(defaultColor);                textDessert.setTextColor(defaultColor);                imageviewheadermain1.setVisibility(View.INVISIBLE);                imageviewheadermain2.setVisibility(View.INVISIBLE);                imageviewheadermain3.setVisibility(View.INVISIBLE);                imageviewheadermain4.setVisibility(View.INVISIBLE);                imageviewheadermain5.setVisibility(View.INVISIBLE);                imageviewheadermain6.setVisibility(View.INVISIBLE);                imageviewheadermain7.setVisibility(View.VISIBLE);                textDrink.setTextColor(getResources().getColor(R.color.drinkbackgroundcolor));                TextView typeDishes = (TextView)findViewById(R.id.typeDishes);                typeDishes.setText("Drinks");                ArrayList<MyDishes> onlyDrink = new ArrayList<>();                for (MyDishes dish : listDishes){                    if (dish.getType().equals("drink")) onlyDrink.add(dish);                }                // reset data in adapter and not re-creating adapter:                customAdapter.setDataSet(onlyDrink);                Main.this.runOnUiThread(new Runnable() {                    @Override                    public void run() {                        customAdapter.notifyDataSetChanged();                    }                });                recyclerView.setAdapter(customAdapter);                customAdapter.notifyDataSetChanged();            }        });        /*        //working with data        recyclerView.setLayoutManager(layoutManager);        //recyclerView.setLayoutManager(new LinearLayoutManager(Main.this));        customAdapter = new CustomAdapter(listDishes, this);        recyclerView.setAdapter(customAdapter);*/    }}